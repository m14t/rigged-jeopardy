{"version":3,"sources":["data/question-data.ts","components/game-board/validate-questions.ts","components/question.tsx","components/game-board/index.tsx","components/players.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["questionData","category","questions","easy","image","concat","process","answer","hard","text","validateQuestions","map","path","every","el","i","arr","Error","useEffect","React","styles","question","alignItems","backgroundColor","color","display","fontSize","height","justifyContent","width","selected","position","top","left","right","bottom","Question","props","_useState","useState","_useState2","Object","slicedToArray","setSelected","_useState3","Math","floor","value","_useState4","setValue","onClick","useCallback","event","disabled","shiftKey","react","style","background","backgroundSize","losingKeys","targetKeys","downHandler","_ref","key","includes","Audio","play","onClose","window","addEventListener","removeEventListener","objectSpread","maxValue","table","th","textAlign","padding","GameBoard","categories","pluck","questionLength","length","valueIncrement","range","row","view","lensPath","column","components_question","onQuestionClose","players","margin","player","border","flexDirection","flexGrow","Players","toString","selectPlayer","parseInt","name","score","initialState","reducer","state","action","type","index","findIndex","propEq","over","add","points","pipe","assoc","set","app","App","_useReducer","useReducer","_useReducer2","dispatch","updatePoints","game_board","some","components_players","Boolean","location","hostname","match","ReactDOM","render","react_default","a","createElement","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49f8091b.chunk.js","sourcesContent":["import { QuestionData } from '../types';\n\nconst questionData: QuestionData = [\n  {\n    category: 'The Year in Photos',\n    questions: [\n      {\n        easy: {\n          image: `${process.env.PUBLIC_URL}/images/celebrity_250_hard_2008.jpg`,\n          answer: '2019',\n        },\n        hard: {\n          text: 'Year Hard 1',\n          answer: '2019',\n        },\n      },\n      {\n        easy: {\n          text: 'Year Easy 2',\n          answer: '2019',\n        },\n        hard: {\n          text: 'Year Hard 2',\n          answer: '2019',\n        },\n      },\n    ],\n  },\n  {\n    category: 'Twomb-matic Moments',\n    questions: [\n      {\n        easy: {\n          text: 'Twomb Easy 1',\n          answer: '2019',\n        },\n        hard: {\n          text: 'Twomb Hard 1',\n          answer: '2019',\n        },\n      },\n      {\n        easy: {\n          text: 'Twomb Easy 2',\n          answer: '2019',\n        },\n        hard: {\n          text: 'Twomb Hard 2',\n          answer: '2019',\n        },\n      },\n    ],\n  },\n];\n\nexport default questionData;\n","import { path } from 'ramda';\nimport { QuestionData } from '../../types';\n\nfunction validateQuestions(questionData: QuestionData) {\n  const categoryLenghts = questionData.map(path(['questions', 'length']));\n  const allCategoriesSameLength = categoryLenghts.every(\n    (el, i, arr) => el === arr[0],\n  );\n\n  if (!allCategoriesSameLength) {\n    throw new Error('All categories do not have the same length');\n  }\n}\n\nexport default validateQuestions;\n","import * as React from 'react';\nimport { QuestionContainer } from '../types';\nimport { useState, useCallback } from 'react';\nconst { useEffect } = React;\n\nconst styles = {\n  question: {\n    alignItems: 'center',\n    backgroundColor: '#0000ff',\n    color: '#ffffff',\n    display: 'flex',\n    fontSize: '10vh',\n    height: '100%',\n    justifyContent: 'center',\n    width: '100%',\n  },\n  selected: {\n    position: 'absolute' as 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n};\n\ntype Props = {\n  disabled: boolean;\n  onClose: (points: number) => void;\n  question: QuestionContainer;\n  value: number;\n};\n\nfunction Question(props: Props) {\n  const [selected, setSelected] = useState(false);\n  const [value, setValue] = useState(`${Math.floor(props.value)}` as any);\n\n  const onClick = useCallback(\n    (event) => {\n      if (props.disabled || value === '') {\n        return;\n      }\n      setSelected(true);\n\n      const question = event.shiftKey\n        ? props.question.hard\n        : props.question.easy;\n\n      if (question.text) {\n        setValue(question.text);\n      } else {\n        setValue(\n          <div\n            style={{\n              background: `url(${question.image})`,\n              backgroundSize: 'cover',\n              height: '100%',\n              width: '100%',\n            }}\n          />,\n        );\n      }\n    },\n    [props.disabled, selected, value],\n  );\n\n  const losingKeys = ['-', '_'];\n  const winningKeys = ['=', '+'];\n  const targetKeys = [...losingKeys, ...winningKeys];\n  function downHandler({ key }: KeyboardEvent) {\n    if (selected && targetKeys.includes(key)) {\n      setSelected(false);\n      setValue('');\n\n      if (losingKeys.includes(key)) {\n        new Audio(\n          `${process.env.PUBLIC_URL}/mp3s/dont-impress-me-much.mp3`,\n        ).play();\n\n        props.onClose(-1 * props.value);\n      } else {\n        new Audio(`${process.env.PUBLIC_URL}/mp3s/whoomp.mp3`).play();\n\n        props.onClose(props.value);\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, [props.onClose, selected]);\n\n  return (\n    <div\n      onClick={onClick}\n      style={\n        selected ? { ...styles.question, ...styles.selected } : styles.question\n      }\n    >\n      {value}\n    </div>\n  );\n}\n\nexport default Question;\n","import * as React from 'react';\nimport { questionData } from '../../data';\nimport validateQuestions from './validate-questions';\nimport { lensPath, pluck, range, view } from 'ramda';\nimport Question from '../question';\nimport { QuestionContainer } from '../../types';\n\nconst maxValue = 1000;\nconst styles = {\n  table: {\n    position: 'relative' as 'relative',\n    color: '#ffffff',\n    height: '90vh',\n    width: '100%',\n  },\n  th: {\n    textAlign: 'center' as 'center',\n    padding: '10px',\n  },\n};\n\ntype Props = {\n  disabled: boolean;\n  onQuestionClose: (points: number) => void;\n};\n\nfunction GameBoard(props: Props) {\n  validateQuestions(questionData);\n\n  const categories = pluck('category', questionData);\n  const questionLength = questionData[0].questions.length;\n  const valueIncrement = maxValue / questionLength;\n\n  return (\n    <table style={styles.table}>\n      <thead>\n        <tr>\n          {categories.map((category) => (\n            <th key={category} style={styles.th}>\n              {category}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {range(0, questionLength).map((row) => (\n          <tr key={row}>\n            {questionData\n              .map(view(lensPath(['questions', row])))\n              .map((question, column) => (\n                <td key={`r${row}c${column}`}>\n                  <Question\n                    disabled={props.disabled}\n                    onClose={props.onQuestionClose}\n                    question={question as QuestionContainer}\n                    value={(row + 1) * valueIncrement}\n                  />\n                </td>\n              ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default GameBoard;\n","import * as React from 'react';\nimport { range, toString } from 'ramda';\nimport { Player } from '../types';\nconst { useEffect } = React;\n\ntype Props = {\n  players: Player[];\n  selectPlayer: (player: Player) => void;\n};\n\nconst styles = {\n  players: {\n    color: '#ffffff',\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '0 10px',\n    height: '10vh',\n  },\n  player: {\n    backgroundColor: '#0000ff',\n    border: '5px solid #0000ff',\n    display: 'flex',\n    flexDirection: 'column' as 'column',\n    flexGrow: 1,\n    justifyContent: 'space-around',\n    margin: '10px',\n    padding: '5px',\n    textAlign: 'center' as 'center',\n  },\n  selected: {\n    border: '5px solid #f4e542',\n  },\n};\n\nfunction Players(props: Props) {\n  const targetKeys = range(1, props.players.length + 1).map(toString);\n  function downHandler({ key }: KeyboardEvent) {\n    if (targetKeys.includes(key)) {\n      props.selectPlayer(props.players[parseInt(key, 10) - 1]);\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []);\n\n  return (\n    <div style={styles.players}>\n      {props.players.map((player, i) => (\n        <div\n          key={i}\n          onClick={() => props.selectPlayer(player)}\n          style={\n            player.selected\n              ? { ...styles.player, ...styles.selected }\n              : styles.player\n          }\n        >\n          <span>{player.name}</span>\n          <span>{player.score}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Players;\n","import * as React from 'react';\nimport GameBoard from '../game-board';\nimport Players from '../players';\nimport { useCallback, useReducer } from 'react';\nimport {\n  add,\n  assoc,\n  findIndex,\n  lensPath,\n  map,\n  over,\n  pipe,\n  propEq,\n  set,\n} from 'ramda';\n\nconst initialState = [\n  {\n    name: 'Player 1',\n    score: 0,\n    selected: false,\n  },\n  {\n    name: 'Player 2',\n    score: 0,\n    selected: false,\n  },\n  {\n    name: 'Player 3',\n    score: 0,\n    selected: false,\n  },\n];\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'updateScore': {\n      const index = findIndex(propEq('selected', true), state);\n\n      return over(lensPath([index, 'score']), add(action.points))(state);\n    }\n    case 'selectPlayer': {\n      const index = findIndex(propEq('name', action.player.name), state);\n      return pipe(\n        map(assoc('selected', false)),\n        set(lensPath([index, 'selected']), true),\n      )(state);\n    }\n    default:\n      return state;\n  }\n};\n\nconst styles = {\n  app: {\n    backgroundColor: '#000000',\n  },\n};\n\nfunction App() {\n  const [players, dispatch] = useReducer(reducer, initialState);\n\n  const selectPlayer = useCallback(\n    (player) => {\n      dispatch({\n        type: 'selectPlayer',\n        player,\n      });\n    },\n    [dispatch, players],\n  );\n  const updatePoints = useCallback(\n    (points) => {\n      dispatch({\n        type: 'updateScore',\n        points,\n      });\n    },\n    [dispatch],\n  );\n\n  return (\n    <div style={styles.app}>\n      <GameBoard\n        disabled={!players.some(propEq('selected', true))}\n        onQuestionClose={updatePoints}\n      />\n      <Players players={players} selectPlayer={selectPlayer} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}